#+title: My Emacs Doom Configuration
#+author: Jonas Avrin
#+email: jonas@cghijinks.com
#+language: en
#+startup: inlineimages
#+property: header-args :tangle config.el :cache yes :results silent :padline no

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Table of Contents :TOC_2_gh:
- [[#doom-config-help][Doom Config Help]]
- [[#issues][Issues]]
- [[#personal-information][Personal Information]]
  - [[#set-full-name][Set full name]]
  - [[#set-email-address][Set email address]]
- [[#doom-core][Doom Core]]
  - [[#core][core]]
  - [[#langorg][lang/org]]
  - [[#langpython][lang/python]]

* Doom Config Help

#+begin_src elisp
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src


* Issues

Alternative to using =:config literate= in ~init.el~
For some reason, I have to comment it out for =doom sync= to rebuild packages on Windows.

#+begin_src elisp
(add-hook! 'after-save-hook
  (when (and
         (string= (file-name-directory buffer-file-name) (expand-file-name doom-private-dir))
         (string= (file-name-extension buffer-file-name) "org"))
    (org-babel-tangle)))
#+end_src


* Personal Information

** Set full name
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jonas Avrin")
#+END_SRC

** Set email address
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "jonas@cghijinks.com")
#+END_SRC


* Doom Core

** [[doom:core/core.el][core]]

*** Do not create lockfiles for files being edited
#+begin_src elisp
(setq create-lockfiles nil)
#+end_src

*** Line numbers

#+begin_src elisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

*** Doom font

#+begin_src elisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "DejaVu Sans Mono" :size 16)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

*** Doom theme

#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)
#+end_src

*** Projectile
When running projectile for the first time, execute =SPC p D= to discover projects
and add the to the cache.

#+begin_src elisp
(after! projectile
  (setq projectile-project-search-path '("D:/git")))
#+end_src

*** Use ~] SPC~ and ~[ SPC~ to insert newlines above and below
 Similar to [[github:tpope/vim-unimpaired][vim-unimpaired]]

#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :m  "] SPC" #'evil-motion-insert-newline-below
   :m  "[ SPC" #'evil-motion-insert-newline-above))
#+END_SRC

** [[doom-modules:lang/org/][lang/org]]

*** Default org directory

#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src

*** Sane Defaults

+ Hide ~~/=/_~ emphasis markers
+ Allow shift selection

#+begin_src elisp
(after! org
  (setq org-hide-emphasis-markers t
        org-support-shift-select t
        evil-org-retain-visual-state-on-shift t))
(map! (:localleader
        (:after evil-org
          :map evil-org-mode-map
          "/" #'counsel-org-goto)))
#+end_src

*** Collapsed heading indicator character

#+begin_src elisp
(setq org-ellipsis " â–¼ ")
#+end_src

*** Pretty Bullets

Pretty bullets :) instead of ugly asterisks :(

#+begin_src elisp
(use-package! org-bullets
  :hook (org-mode . org-bullets-mode)
  :config (setq org-bullets-bullet-list '("+")))
#+end_src

*** Default bullet character

#+begin_src elisp
(after! org-bullets
  ())
#+end_src

*** Notes filename

#+begin_src elisp
(after! org
  (setq org-default-notes-file (expand-file-name "notes.org" org-directory)))
#+end_src

*** Maximum number of files for refile

#+begin_src elisp
(after! org
  (setq
   org-refile-targets '((nil :maxlevel . 5)
                        (org-agenda-files :maxlevel . 5))))
#+end_src

*** Strike through done headlines

#+begin_src elisp
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (
                 :weight bold
                 :strike-through t))))
 '(org-headline-done
   ((((class color) (min-colors 16) (background dark))
     (:strike-through t)))))
#+end_src

*** TODO Capture Templates

#+begin_src elisp :tangle no
(after! org
  :config
  (setq +org-dir org-directory
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-capture-templates
        '(("c" "Code Task" entry (file+headline org-default-notes-file "Coding Tasks")
           "* TODO %?\n  Entered on: %U - %a\n")
          ("t" "Task" entry (file+headline org-default-notes-file "Tasks")
           "* TODO %?\n  Entered on: %U")
          ("n" "Note" entry (file+olp+datetree org-default-notes-file)
           "* %?\n\n"))))
#+end_src


** [[doom-modules:lang/python][lang/python]]

*** LOOP Lsp mode

lsp-mode is working, not so thrilled with python 2 performance but works good enough in a python 3 environment.

Configs for inspiration: [[https://github.com/nishikant/emacs/blob/4ea892d6555a57ee725e16fe7abd3d7942252b9a/init.org][nishikant/emacs]]

#+begin_src elisp :tangle no
(use-package! lsp-mode
  :hook ((lsp-mode . lsp-enable-which-key-integration)
         (before-save . lsp-organize-imports)
         (python-mode . lsp-deferred))
  :commands (lsp lsp-deferred)
  :config
  (setq gc-cons-threshold 50000000 ;; 50MB threshold
        read-process-output-max (* 1024 1024) ;; 1MB
        lsp-completion-provider :capf ;; Company backend
        lsp-idle-delay 0.500 ;; Be more idle
        lsp-print-performance t ;; Monitor performance
        ;; lsp-pyls-plugins-pydocstyle-enabled nil ;; Disable pydocstyle
        ;; lsp-modeline-diagnostics-scope :workspace
        ;; lsp-headerline-breadcrumb-enable t
        ;; lsp-enable-snippet t
        ;; lsp-file-watch-threshold 4000
        ;; lsp-headerline-breadcrumb-mode t
        ;; lsp-semantic-highlighting 'immediate
  ))
#+end_src
