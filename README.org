#+title: My Emacs Doom Configuration
#+author: Jonas Avrin
#+email: jonas@cghijinks.com
#+language: en
#+startup: inlineimages
#+property: header-args :tangle config.el :cache yes :results silent :padline no

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Table of Contents :TOC_2_gh:
- [[#doom-config-help][Doom Config Help]]
- [[#issues][Issues]]
- [[#personal-information][Personal Information]]
  - [[#set-full-name][Set full name]]
  - [[#set-email-address][Set email address]]
- [[#doom-core][Doom Core]]
  - [[#core][core]]
  - [[#editormultiple-cursors][editor/multiple-cursors]]
  - [[#langorg][lang/org]]
  - [[#langpython][lang/python]]

* Doom Config Help

#+begin_src elisp
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src


* Issues

Alternative to using =:config literate= in ~init.el~
For some reason, I have to comment it out for =doom sync= to rebuild packages on Windows.

#+begin_src elisp
(add-hook! 'after-save-hook
  (when (and
         (string= (file-name-directory buffer-file-name) (expand-file-name doom-private-dir))
         (string= (file-name-extension buffer-file-name) "org"))
    (org-babel-tangle)))
#+end_src


* Personal Information

** Set full name
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jonas Avrin")
#+END_SRC

** Set email address
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "jonas@cghijinks.com")
#+END_SRC


* Doom Core

** [[doom:core/core.el][core]]

*** Do not create lockfiles for files being edited
#+begin_src elisp
(setq create-lockfiles nil)
#+end_src

*** Line numbers

#+begin_src elisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

*** Doom font

#+begin_src elisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "DejaVu Sans Mono" :size 16)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

*** Doom theme

#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)
#+end_src

*** Projectile
When running projectile for the first time, execute =SPC p D= to discover projects
and add the to the cache.

#+begin_src elisp
(after! projectile
  (setq projectile-project-search-path '("D:/git")))
#+end_src

*** Use ~] SPC~ and ~[ SPC~ to insert newlines above and below
 Similar to [[github:tpope/vim-unimpaired][vim-unimpaired]]

#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :m  "] SPC" #'evil-motion-insert-newline-below
   :m  "[ SPC" #'evil-motion-insert-newline-above))
#+END_SRC

*** Keybindings

Copy region, but don't kill it.

#+begin_src elisp
(unless (featurep! :editor evil)
  (map! :leader "k" #'copy-region-as-kill))
#+end_src

Reload the buffer using contents on disk.

#+begin_src elisp
(unless (featurep! :editor evil)
  (map! :leader "r" #'revert-buffer))
#+end_src

** [[doom-modules:editor/multiple-cursors/][editor/multiple-cursors]]

*** MC Extras

Remove blank lines. I'm doing this all the time when using mc.

#+begin_src elisp
(unless (featurep! :editor evil)
  (map! :leader :desc "remove blank lines" "m C-l" #'mc/remove-cursors-on-blank-lines))
#+end_src

** [[doom-modules:lang/org/][lang/org]]

*** Default org directory

#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src

*** Sane Defaults

+ Hide ~~/=/_~ emphasis markers
+ Allow shift selection

#+begin_src elisp
(after! org
  (setq org-hide-emphasis-markers t
        org-support-shift-select t
        evil-org-retain-visual-state-on-shift t))
(map! (:localleader
        (:after evil-org
          :map evil-org-mode-map
          "/" #'counsel-org-goto)))
#+end_src

*** Collapsed heading indicator character

#+begin_src elisp
(setq org-ellipsis " â—€ ")
#+end_src

*** Notes filename

#+begin_src elisp
(after! org
  (setq org-default-notes-file (expand-file-name "notes.org" org-directory)))
#+end_src

*** Maximum number of files for refile

#+begin_src elisp
(after! org
  (setq
   org-refile-targets '((nil :maxlevel . 5)
                        (org-agenda-files :maxlevel . 5))))
#+end_src

*** Strike through done headlines

#+begin_src elisp
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (
                 :weight bold
                 :strike-through t))))
 '(org-headline-done
   ((((class color) (min-colors 16) (background dark))
     (:strike-through t)))))
#+end_src

*** Org GTD

Toggle header TODO to DONE status when checkboxes are all ticked, otherwise toggle to TODO status

#+begin_src elisp
(after! org
  (defun jawa/org-checkbox-todo ()
    "Switch header TODO state to DONE when all checkboxes are ticked, to TODO otherwise"
    (let ((todo-state (org-get-todo-state)) beg end)
      (unless (not todo-state)
        (save-excursion
      (org-back-to-heading t)
      (setq beg (point))
      (end-of-line)
      (setq end (point))
      (goto-char beg)
      (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                     end t)
          (if (match-end 1)
          (if (equal (match-string 1) "100%")
              (unless (string-equal todo-state "DONE")
                (org-todo 'done))
            (unless (string-equal todo-state "TODO")
              (org-todo 'todo)))
            (if (and (> (match-end 2) (match-beginning 2))
                 (equal (match-string 2) (match-string 3)))
            (unless (string-equal todo-state "DONE")
              (org-todo 'done))
          (unless (string-equal todo-state "TODO")
            (org-todo 'todo)))))))))

  (add-hook! 'org-checkbox-statistics-hook (jawa/org-checkbox-todo))
#+end_src

Org emphasis markers toggle function

#+begin_src elisp
  ;; Toggle display of special markdown formatting characters in org buffers
  (defun jawa/toggle-org-emphasis-markers (&optional arg)
    (interactive)
    "Toggle emphasis markers"
    (setq org-hide-emphasis-markers
          (if (null arg)
              (not org-hide-emphasis-markers)
            arg)))
#+end_src

Org todo keywords

#+begin_src elisp
  ;; GTD TODO keywords and hide logs
  (setq org-todo-keywords
        '((sequence
           "TODO"
           "ACTION"
           "IN-PROGRESS"
           "INCUBATE"
           "DEFERRED(@d)"
           "WAITING(w@)"
           "|"
           "DONE(@o)"
           "DELEGATED(l@)"
           "ARCHIVE"
           "CANCELLED")
          (sequence
           "[ ](T)"   ; A task that needs doing
           "[-](S)"   ; Task is in progress
           "[?](W)"   ; Task is being held up or paused
           "|"
           "[X](D)")  ; Task was completed
          (sequence
           "|"
           "OKAY(o)"
           "YES(y)"
           "NO(n)")))

  (setq org-log-into-drawer nil)
#+end_src

My system for fast and consistent tag selection.

#+begin_src elisp
  ;; GTD fast tag selection
  (setq org-tag-persistent-alist
        '(("gtd" . ?G)
          (:startgroup)
          ("engage" . ?N)  ;; Day to day engagement
          ("review" . ?R)  ;; Periodic review
          ("someday" . ?S) ;; Someday maybe project list
          (:endgroup)

          ;; Three Models for making action choices
          ;; #1 - The Four-Criteria Model for choosing actions in the moment

          ("context" . ?C)

          ;; 1 - Context : are you in the right space to do this action?

          (:startgroup)
          ("@home" . ?h) ("@work" . ?w) ("@anywhere" . ?a) ("@mobile")
          (:endgroup)

          ("sub_context" . ?X)
          (:startgroup)
          ("office" . ?1) ("outside" . ?2) ("garage" . ?3)
          ("kitchen" . ?4) ("bathroom" . ?5) ("storage" . ?6)
          (:endgroup)

          ("status" . ?B)
          (:startgroup)
          ;; ("status" . ?X))
          ("online". ?o) ("offline" . ?O)
          (:endgroup)

          ("type" . ?E)
          (:startgroup)
          ("meeting" . ?m) ("discussion" . ?t) ("call" . ?c)
          (:endgroup)

          ;; 2 - Time Available : do you have enough time to complete it?

          ("time" . ?T)
          (:startgroup)
          ("5m_or_less" . ?q)  ; quick
          ("30m_or_less" . ?l)  ; less quick
          ("30m_or_more" . ?s)  ; slow
          (:endgroup)

          ;; 3 - Energy available : are you alert enough to do this?

          ("intensity" . ?I)
          (:startgroup)
          ("high" . ?9)
          ("low" . ?0)
          (:endgroup)

          ;; 4 - Priority : what's going to give you the highest payoff
          ;; Track this using TODO priority

          ;; #2 - The Threefold Model for Identifying Daily Work
          ;; Doing predefined work - working from NAs and calendar
          ;; Do work as it shows up
          ;; Defining your work - clearing inboxes, processing meeting notes, breaking down new projects
          ;; Do during periodic review meeting
          ;; Track this using :review: tag

          ;; #3 - The Six-Level Model for Reviewing Your Own Work
          ;; There are 6 perspectives to define priorities

          ;; 1 - Ground : current next actions list

          ;; 2 - Projects : Current projects, they are generating the most NAs
          ("project" . ?p)("area" . ?A)
          (:startgroup)
          ("clarify" . ?y)
          ("brainstorm" .?b)
          ("reference" . ?r)
          ("research" . ?j)
          (:endgroup)

          ;; 3 - Areas of Focus and Accountability : key areas of life and work.

          ;; TODO Identify areas of focus
          ("aof" . ?k)
          (:startgroup)
          (:endgroup)

          ;; 4 - Goals : one to two years from now

          ;; TODO Identify goals
          ("goals" . ?g)
          (:startgroup)
          (:endgroup)

          ;; 5 - Vision : projecting three to five years out into bigger categories

          ("vision" . ?v)
          (:startgroup)
          ("strategies" . ?z)
          ("trends" . ?d)
          ("career" . ?e)
          (:endgroup)

          ;; 6 - Purpose and principles : Big picture view

          ;; TODO Identify principles
          ("principles" . ?i)
          (:startgroup)
          (:endgroup))))
#+end_src

Setup columns so that tags are right justified.

#+begin_src elisp
  (setq org-columns-default-format "%60ITEM(Task) %10Effort(Effort){:} %PRIORITY %10CLOCKSUM(T Spent) %10CLOCKSUM_T(T Spent Today) %TAGS")
  (setq org-global-properties
        (quote (("Effort_ALL" . "0:05 0:10 0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 8:00")
                ("SYTLE_ALL" . "habit"))))
#+end_src

Keep track of when Todo items where completed.

#+begin_src elisp
  (setq org-log-done 'time
        ;; record a note along with the timestamp
        ;; org-log-done 'note
        )
#+end_src

Make clock history persist across sessions

#+begin_src elisp
  ;; the incomplete clock will be found (see Resolving idle time) and
  ;; you will be prompted about what to do with it
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+end_src


** [[doom-modules:lang/python][lang/python]]

*** IN-PROGRESS Lsp mode

lsp-mode is working, not so thrilled with python 2 performance but works good enough in a python 3 environment.

Configs for inspiration: [[https://github.com/nishikant/emacs/blob/4ea892d6555a57ee725e16fe7abd3d7942252b9a/init.org][nishikant/emacs]]

#+begin_src elisp :tangle no
(use-package! lsp-mode
  :hook ((lsp-mode . lsp-enable-which-key-integration)
         (before-save . lsp-organize-imports)
         (python-mode . lsp-deferred))
  :commands (lsp lsp-deferred)
  :config
  (setq gc-cons-threshold 50000000 ;; 50MB threshold
        read-process-output-max (* 1024 1024) ;; 1MB
        lsp-completion-provider :capf ;; Company backend
        lsp-idle-delay 0.500 ;; Be more idle
        lsp-print-performance t ;; Monitor performance
        ;; lsp-pyls-plugins-pydocstyle-enabled nil ;; Disable pydocstyle
        ;; lsp-modeline-diagnostics-scope :workspace
        ;; lsp-headerline-breadcrumb-enable t
        ;; lsp-enable-snippet t
        ;; lsp-file-watch-threshold 4000
        ;; lsp-headerline-breadcrumb-mode t
        ;; lsp-semantic-highlighting 'immediate
))
#+end_src
