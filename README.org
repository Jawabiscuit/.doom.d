#+title: My Emacs Doom Configuration
#+author: Jonas Avrin
#+email: jonas@cghijinks.com
#+language: en
#+startup: inlineimages
#+property: header-args :tangle config.el :cache yes :results silent :padline no

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Table of Contents :TOC_2_gh:
- [[#doom-config-help][Doom Config Help]]
- [[#issues][Issues]]
- [[#personal-information][Personal Information]]
  - [[#set-full-name][Set full name]]
  - [[#set-email-address][Set email address]]
- [[#doom-core][Doom Core]]
  - [[#core][Core]]
  - [[#langorg][lang/org]]

* Doom Config Help

#+begin_src elisp
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

* Issues

Alternative to using =:config literate= in ~init.el~
For some reason, I have to comment it out for =doom sync= to rebuild packages on Windows.

#+begin_src elisp
(add-hook! 'after-save-hook
  (when (and
         (string= (file-name-directory buffer-file-name) (expand-file-name doom-private-dir))
         (string= (file-name-extension buffer-file-name) "org"))
    (org-babel-tangle)))
#+end_src


* Personal Information

** Set full name
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jonas Avrin")
#+END_SRC

** Set email address
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "jonas@cghijinks.com")
#+END_SRC


* Doom Core

** [[doom:core/core.el][Core]]

*** Do not create lockfiles for files being edited
#+begin_src elisp
(setq create-lockfiles nil)
#+end_src

*** Line numbers

#+begin_src elisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

*** Doom font

#+begin_src elisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "DejaVu Sans Mono" :size 16)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

*** Doom theme

#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)
#+end_src

** [[doom-modules:lang/org/][lang/org]]

*** Default directory

#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src
